# this is a script 
from distutils.cmd import Command
import random 
import re

new_seed = int(random.random() * 1000000)
seed = 312694
random.seed(seed)
DIR = "/work/stu/pguo/code/hehecore/regression/own_tests"


mem = []
for i in range(0, 1 << 16):
    # mem.append((((i << 3) + 4) << 32) + (i << 3))
    mem.append(0)


HEAD = f"""# this test is generated by a python script
# random seed is {seed}
.section .text.init;
.globl _start;


_start:
    j       _init;
_init:
"""

# INIT = f"""_init:
#     li\t\tt0,\t1;
#     slli\t\tt0,\tt0,\t14;
#     li\t\tt1,\t0;
# _loop_start:

# """

TAIL = """
_success: 
    li\t\tgp,\t1;
    li\t\tt0,\t0x11000000;
    sw\t\tgp,\t0(t0);
    li\t\tt1,\t0x21000000;
    ld\t\tt2,\t0(t1);

    j\t\t_end;
_fail:
    li\t\tgp,\t2;
    li\t\tt0,\t0x11000000;
    sw\t\tgp,\t0(t0);
    li\t\tt1,\t0x21000000;
    ld\t\tt2,\t0(t1);


_end: 
    nop;
.data
.align 4;

"""

TEST_NUM = 1024;


class request:
    'a class for request'
    def __init__(self, addr, data, opcode, size, unsign, mapping) -> None:
        self.addr = addr
        self.data = data
        self.opcode = opcode
        self.size = size
        self.unsign = unsign
        self.mapping = mapping

    def __str__(self) -> str:
        return f"op:{self.opcode} @ {hex(self.addr)}, size: {self.size}, unsign:{self.unsign}: {hex(self.data)}, mapping: {self.mapping}"

def gen_load(req):
    size_mask = ((1 << ((2 ** (req.size)) * 8)) - 1)
    correct_data =  (mem[(req.addr & 0xfff8) >> 3] >> ((req.addr & 0x7) * 8)) & size_mask
    sign_mask = ((1 << ((2 ** (req.size)) * 8 - 1)))
    sign = (correct_data & sign_mask) >> ((2 ** (req.size)) * 8 - 1)
    if req.unsign == 0 and sign == 1:
        correct_data = (0xffffffffffffffff & ~size_mask )+ correct_data
    op = ""

    if req.size == 0 :
        op = "lb" if (req.unsign == 0) else "lbu"
    elif req.size == 1:
        op = "lh" if (req.unsign == 0) else "lhu"
    elif req.size == 2:
        op = "lw" if (req.unsign == 0) else "lwu"
    else:
        op = "ld"

    com =  \
f"""\tli\t\tt1,\t{hex(req.addr)}; 
    {op}\t\tt2,\t0(t1); 
    li\t\tt3,\t{hex(correct_data)}; 
    bne\t\tt3,\tt2,\t_fail; 
    # origindata: {hex(mem[(req.addr & 0xfff8) >> 3])}
"""

    return com

def gen_store(req):
    mask = (((1 << ((2 ** (req.size)) * 8)) - 1) << ((req.addr & 0x7) * 8)) & 0xffffffffffffffff
    mem[(req.addr & 0xfff8) >> 3] = (mem[req.addr & 0xfff8] & (~mask)) + (req.data & mask)
    op = ""
    if req.size == 0 :
        op = "sb"
    elif req.size == 1:
        op = "sh"
    elif req.size == 2:
        op = "sw"
    else:
        op = "sd"
    com =  \
f"""\tli\t\tt1,\t{hex(req.addr)};
    li\t\tt2,\t{hex(req.data)};
    {op}\t\tt2,\t0(t1);
"""
    return com
    

def gen(req):
    if req.opcode == 1:
        return gen_store(req)
    else :
        return gen_load(req) 
        
def gen_final_check():
    s = \
"""
_final_check:
"""
    for i in range(0, 2 ** 13):
        s += \
f"""\tli\t\tt0,\t{hex(mem[i])}; # correct mem
    li\t\tt1,\t{hex((i << 3) + 0x300000000)}; # address
    ld\t\tt2,\t0(t1); # load to mem
    bne\t\tt2,\tt0,\t_fail;

"""
    return s

def gen_init():
    s = \
"""
_init:
"""
    for i in range(0, 2 ** 13):
        s += \
f"""\tli\t\tt0,\t{hex((((i << 3) + 4) << 32) + (i << 3))};
    li\t\tt1,\t{hex((i << 3) + 0x300000000)};
    sd\t\tt0,\t0(t1);

"""
    s+= \
"""\tj\t\t_test0;
"""
    return s

def __main__():
   
    f = open(DIR + "/lsu.S", mode="w")
    f.write(HEAD)

    for i in range(0, TEST_NUM):
        f.write("\n_test" + str(i) + ":\n")
        # opcode = 1
        opcode = 0 if int(random.random() * 2) == 0 \
            else 1
        size = int(random.random() * 4)
        unsign = 0 if opcode == 1 or size == 3 \
            else int(random.random() * 2)
        mapping = int(random.random() * 2)
        # mapping = 1
        addr = ((int(random.random() * (1 << 16)) << size) & 0xffff)
        addr += 0x30000000 if mapping == 1 else 0x10000000

        req = request(addr, int(random.random() * (1 << 64)), opcode, size, unsign, mapping)

        # if req.opcode == 1 :
        # print(req)

        f.write(gen(req))
        # print(req)
        # print(hex(mask))
        # print(hex(mem[i]))

    # f.write(gen_init())
    # f.write(gen_final_check())

    f.write(TAIL)
    f.close()

__main__()